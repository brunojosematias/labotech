# Define a versão do Docker Compose que está sendo usada
version: "3"

# "services" define os três containers que fazem parte da aplicação (backend, frontend e db)
services:
  backend:
    image: node:20 
    container_name: api
    working_dir: /src/
    depends_on:
      -  postgresql-master
    environment:
      # - DATABASE_URL=postgres://root:root@database/labotech?schema=public
      # - DATABASE_URL=postgres://root:root@postgres_primary/labotech?schema=public
     DATABASE_URL: postgres://postgres:postgres@/labotech?schema=public


    volumes: 
      - ./backend:/src/
    ports: 
      - "3333:3333"
    command: npm run dev

  # backend:
  #   # Imagem do Docker Hub para criar um container Node.jsSj
  #   image: node:16-alpine3.17
  #   container_name: backend-container
  #   build:
  #     context: ./backend
  #     dockerfile: ./Dockerfile

  #   # "volumes" mapeia a pasta ./backend do host para /home/node/app dentro do container
  #   volumes:
  #     - ./backend:/home/node/app
  #   # Expõe a porta '3333' do contêiner para a porta '3333' do host
  #   ports:
  #     - "3333:3333"
  #   depends_on:
  #     - db
  #   networks:
  #     - sd_kawi
  #   environment:
  #     - DATABASE_URL=postgres://root:root@database/labotech?schema=public
  #   # Comando para iniciar o servidor Node.js
  #   command: npm run dev
  
    restart: unless-stopped

  frontend:
    image: node:latest
    container_name: frontend-container
    working_dir: /home/node/app
    volumes:
      - ./frontend:/home/node/app
    ports:
      - "5173:5173"
    depends_on:
      - backend
    command: npm run dev --host 0.0.0.0

  # postgres_primary:
  #   # Imagem do Docker Hub para criar um container do PostgreSQL
  #   image: 'bitnami/postgresql:latest'
  #   container_name: labotech-postgres-primary
  #   # Configuração das variáveis de ambiente relacionadas ao PostgreSQL
  #   environment:
  #     POSTGRES_USER: root
  #     POSTGRES_PASSWORD: root
  #     # POSTGRES_DB: labotech
  #     POSTGRES_HOST_AUTH_METHOD: trust  # Permitir conexões confiáveis
  #     POSTGRES_REPLICATION: true
  #   ports:
  #     - '5432:5432'
  #   networks:
  #     - sd_kawi

  # postgres_replica:
  #   image: 'bitnami/postgresql:latest'
  #   container_name: labotech-postgres-replica
  #   environment:
  #     POSTGRES_USER: root
  #     POSTGRES_PASSWORD: root
  #     # POSTGRES_DB: labotech
  #     POSTGRES_MASTER_HOST: postgres_primary
  #     POSTGRES_REPLICATION: true
  #     POSTGRES_HOST_AUTH_METHOD: trust  # Permitir conexões confiáveis
  #   ports:
  #     - '5432'
  #   networks:
  #     - sd_kawi

  postgresql-master:
    image: bitnami/postgresql
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - postgresql_master_data:/bitnami/postgresql
      - ./db.sql:/docker-entrypoint-initdb.d/db.sql
    environment:
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_user
      - POSTGRESQL_USERNAME=my_user
      - POSTGRESQL_PASSWORD=my_password
      - POSTGRESQL_DATABASE=labotech
      - ALLOW_EMPTY_PASSWORD=yes

  postgresql-slave:
    image: bitnami/postgresql
    restart: always
    ports:
      - '5433:5432'
    depends_on:
      - postgresql-master
    environment:
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_MASTER_HOST=postgresql-master
      - POSTGRESQL_PGAUDIT_LOG=READ
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_user
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - ALLOW_EMPTY_PASSWORD=yes


volumes:
  postgresql_master_data:

  
networks:
  sd_kawi:
    driver: bridge
