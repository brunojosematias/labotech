# Define a versão do Docker Compose que está sendo usada
version: "3"

# "services" define os três containers que fazem parte da aplicação (backend, frontend e db)
services:
  # backend:
  #   # Imagem do Docker Hub para criar um container Node.jsSj
  #   image: node:latest
  #   container_name: backend-container
  #   build:
  #     context: ./backend
  #     dockerfile: ./backend/Dockerfile

  #   # "volumes" mapeia a pasta ./backend do host para /home/node/app dentro do container
  #   volumes:
  #     - ./backend:/home/node/app
  #   # Expõe a porta '3333' do contêiner para a porta '3333' do host
  #   ports:
  #     - "3333:3333"
  #   depends_on:
  #     - postgres_primary
  #   networks:
  #     - sd_kawi
  #   environment:
  #     - DATABASE_URL=postgres://root:root@database/labotech?schema=public
  #   # Comando para iniciar o servidor Node.js
  #   command: npm run dev
  #   restart: unless-stopped

  backend:
    image: node:20
    container_name: backend-container
    working_dir: /src/
    depends_on:
      - postgres_primary
    volumes:
      - ./backend:/src/
    ports:
      - "3333:3333"
    command: npm run dev
    




  frontend:
    image: node:latest
    container_name: frontend-container
    working_dir: /home/node/app
    volumes:
      - ./frontend:/home/node/app
    ports:
      - "5173:5173"
    depends_on:
      - backend
    command: npm run dev --host 0.0.0.0

  postgres_primary:
    # Imagem do Docker Hub para criar um container do PostgreSQL
    image: postgres:latest
    container_name: labotech-postgres-primary
    # Configuração das variáveis de ambiente relacionadas ao PostgreSQL
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: labotech
    ports:
      - "5432:5432"
    networks:
      - sd_kawi

  postgres_replica:
    image: postgres:latest
    container_name: labotech-postgres-replica
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: labotech
      POSTGRES_MASTER_HOST: postgres_primary
      POSTGRES_REPLICATION: true
    networks:
      - sd_kawi

    # command: ["./configure-replication.sh"]


  # Volumes são usados para persistência de dados entre contêineres e reinicializações
volumes:
  postgres_data: # Este arquivo de composição Docker Compose cria três contêineres: um para o backend, um para o frontend e um para o banco de dados PostgreSQL. Esses contêineres são interconectados e configurados para executar os serviços Node.js e o banco de dados PostgreSQL.
networks:
  sd_kawi:
    driver: bridge
