
# Define a versão do Docker Compose que está sendo usada
version: "3"

# "services" define os três containers que fazem parte da aplicação (backend, frontend e db)
services:
  backend:
    image: node:20 
    container_name: api
    working_dir: /src/
    depends_on:
      - db
    volumes: 
      - ./backend:/src/
    ports: 
      - "3333:3333"
    command: npm run dev

  # backend:
  #   # Imagem do Docker Hub para criar um container Node.jsSj
  #   image: node:16-alpine3.17
  #   container_name: backend-container
  #   build:
  #     context: ./backend
  #     dockerfile: ./Dockerfile

  #   # "volumes" mapeia a pasta ./backend do host para /home/node/app dentro do container
  #   volumes:
  #     - ./backend:/home/node/app
  #   # Expõe a porta '3333' do contêiner para a porta '3333' do host
  #   ports:
  #     - "3333:3333"
  #   depends_on:
  #     - db
  #   networks:
  #     - sd_kawi
  #   environment:
  #     - DATABASE_URL=postgres://root:root@database/labotech?schema=public
  #   # Comando para iniciar o servidor Node.js
  #   command: npm run dev
  
    restart: unless-stopped

  frontend:
    image: node:16-alpine3.17
    container_name: frontend-container
    working_dir: /home/node/app
    volumes:
      - ./frontend:/home/node/app
    ports:
      - "5173:5173"
    depends_on:
      - backend
    command: npm run dev --host 0.0.0.0

  db:
    # Imagem do Docker Hub para criar um container do PostgreSQL
    image: postgres:latest
    container_name: labotech-postgres
    # Configuração das variáveis de ambiente relacionadas ao PostgreSQL
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    networks:
      - sd_kawi

# Volumes são usados para persistência de dados entre contêineres e reinicializações
volumes:
  postgres_data:
  
networks:
  sd_kawi:
    driver: bridge